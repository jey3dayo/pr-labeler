[env]
# 環境変数の読み込み
_.file = [".env"]
_.path = ['./node_modules/.bin']

[tools]
node = '22'
"npm:pnpm" = '10.18.3'
"npm:prettier" = 'latest'
"npm:markdownlint-cli2" = 'latest'
"npm:markdown-link-check" = 'latest'
fd = 'latest'

[tasks]
# === 統合タスク ===
format.run = [
  "pnpm format",
  "markdownlint-cli2 --fix '**/*.md'",
]

lint.run = [
  "pnpm lint",
  "pnpm type-check",
  "markdownlint-cli2 '**/*.md'",
]

test.run = ["pnpm test"]

build.run = ["pnpm build"]

# === 開発支援 ===
[tasks."dev:debug"]
description = "デバッグモードで開発サーバー起動"
run = "tsx --inspect src/index.ts"
env = { NODE_ENV = "development" }

[tasks."build:watch"]
description = "ビルドをwatchモードで実行"
run = "ncc build src/index.ts -o dist --watch"

# === CI/CD ===
[tasks.ci]
description = "CI/CD用の完全品質チェック"
run = [
  "mise run format",
  "mise run lint",
  "mise run test",
  "mise run build",
  "mise run docs:check",
]

[tasks.quick]
description = "開発中のクイックチェック"
run = "pnpm test:quick"

# === セットアップ ===
[tasks.setup]
description = "プロジェクト初期セットアップ"
run = [
  "pnpm install",
  "mise run build",
  "mise run test",
]

# === リリース準備 ===
[tasks.release]
description = "インタラクティブなリリース（バージョンタイプを選択）"
run = '''
echo "リリースタイプを選択してください:"
echo "  1) patch (バグ修正)"
echo "  2) minor (新機能)"
echo "  3) major (破壊的変更)"
read -p "選択 (1-3): " -n 1 -r choice
echo
case $choice in
  1) ./.specify/scripts/release.sh patch ;;
  2) ./.specify/scripts/release.sh minor ;;
  3) ./.specify/scripts/release.sh major ;;
  *) echo "無効な選択です"; exit 1 ;;
esac
'''

[tasks."release:patch"]
description = "パッチリリース (v1.0.x)"
run = "./.specify/scripts/release.sh patch"

[tasks."release:minor"]
description = "マイナーリリース (v1.x.0)"
run = "./.specify/scripts/release.sh minor"

[tasks."release:major"]
description = "メジャーリリース (vx.0.0)"
run = "./.specify/scripts/release.sh major"

# === ドキュメント ===
[tasks."docs:lint"]
description = "Markdownファイルのlint"
run = "markdownlint-cli2 '**/*.md'"

[tasks."docs:links"]
description = "Markdownリンクチェック"
run = "fd -e md -X markdown-link-check --config .markdown-link-check.json --quiet"

[tasks."docs:links:verbose"]
description = "Markdownリンクチェック（詳細）"
run = "fd -e md -X markdown-link-check --config .markdown-link-check.json --verbose"

[tasks."docs:check"]
description = "全Markdownドキュメントのlintとリンクチェック"
depends = ["docs:lint", "docs:links"]

[tasks."docs:fix"]
description = "Markdownドキュメントの自動修正"
run = "markdownlint-cli2 --fix '**/*.md'"

# === GitHub Actions ===
[tasks."action:test"]
description = "GitHub Actionをローカルでテスト実行"
run = "act pull_request -W .github/workflows/test.yml"

# === クリーンアップ ===
[tasks.clean]
description = "ビルド成果物とキャッシュをクリア"
run = [
  'rm -rf dist',
  'rm -rf coverage',
  'rm -rf node_modules/.cache',
  'rm -rf .vitest',
  'rm -f .eslintcache',
  'rm -f .prettiercache',
]

[tasks."clean:full"]
description = "完全クリーンアップ（node_modules含む）"
run = [
  'mise run clean',
  'rm -rf node_modules',
  'rm -f pnpm-lock.yaml',
]

# === コミット前チェック ===
[tasks."pre-commit"]
description = "コミット前の自動チェックと修正"
run = [
  "mise run format",
  "pnpm test:quick",
]
